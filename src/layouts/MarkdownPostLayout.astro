---
import { Image } from 'astro:assets';
import BaseLayout from './BaseLayout.astro';
import type { CollectionEntry } from "astro:content";
//import { Image, Picture } from '@astrojs/image/components';
type Props = CollectionEntry<"blog">["data"];
const { title, tags, description, pubDate, author, image } = Astro.props;
const author_profile = `${author}_profile.webp`;
//const isImageSrcNotBlank = image.src.trim() !== '';
const isImageSrcNotBlank = image && image.src && image.src.trim() !== '';
//const authorProfile = `/${author()}_profile.webp`
const monthNames = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

const formatMonth = (date: string | number | Date) => {
  const pubDate = new Date(date);
  const day = pubDate.getDate();
  const month = monthNames[pubDate.getMonth()];
  const year = pubDate.getFullYear();
  let daySuffix;

  if (day >= 11 && day <= 13) {
    daySuffix = 'th';
  } else {
    switch (day % 10) {
      case 1:
        daySuffix = 'st';
        break;
      case 2:
        daySuffix = 'nd';
        break;
      case 3:
        daySuffix = 'rd';
        break;
      default:
        daySuffix = 'th';
    }
  }
  //return `${day} ${month}, ${year}`;
  return `${day}${daySuffix} ${month}`;
    };
  
//      <Picture src={image.src} widths={[400, 600, 1000]} aspectRatio="1:2" sizes="(max-width: 1000px) 100vw, 1000px" formats={['webp']} loading="lazy" alt={image.alt} />

// 
---
<BaseLayout pageTitle={title}>

        <div>
          <div id="author_block" class="flex my-6 justify-between">
            <div class="flex items-center">
              <a href={`/authors/${author}`}><img class="size-24 rounded-full mr-2 p-1 ring-2 ring-gray-700 dark:ring-gray-300" src={`/${author.toLowerCase()}_profile.webp`} alt={author} loading="lazy"></a>
              <div class="text-lg">
                <a href={`/authors/${author}`} class="leading-none transition duration-500 ease-in-out prose md:prose-xl lg:prose-2xl dark:prose-invert font-bold">{author}</a>
                <p class="prose dark:prose-invert">
                  <time>{formatMonth(pubDate)}, <a href={`/years/${new Date(pubDate).getFullYear()}`}>{`${new Date(pubDate).getFullYear()}`}</a></time>

                 
                </p>
              </div>
            </div>
            <!-- keep this blank -->
          </div> <!--author_block-->
          <h1 class="text-balance text-balance pb-4 text-4xl md:text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500">{title}</h1>
          <p class="prose md:prose-lg lg:prose-xl dark:prose-invert max-w-none">{description}</p>          
                <div id="tags" class="prose dark:prose-invert max-w-none">
                  {tags.length > 0 && (
                    <svg aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" class="inline-block size-6" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
                      <path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
                      <path d="M6 9h-.01" />
                    </svg>
                    <>
                      {tags.map((tag, i) => (
                        <>
                          <a
                            class="inline-block before:content-['#']"
                            aria-label={`View more blogs with tag ${tag}`}
                            href={`/tags/${tag}`}
                            title={tag}
                          >
                            {tag.charAt(0).toUpperCase() + tag.slice(1)}
                          </a>
                          {i < tags.length - 1 && ", "}
                        </>
                      ))}
                    </>
                  )}
                </div> <!-- tags end -->
                <!-- {isImageSrcNotBlank && (
                  <Image  src={image.src} class="border-2 border-gray-600 my-4" alt={image.alt} loading="lazy"/>
                )} -->
                {isImageSrcNotBlank && (
                  <>
                    {image.src.startsWith('http') || image.src.startsWith('https') ? (
                      <img src={image.src} class="border-2 santm border-gray-600 my-4" alt={image.alt} loading="lazy" />
                    ) : (
                      <img src={image.src} class="border-2 border-gray-600 my-4" alt= aa {image.alt} loading="lazy" />
                      <span>{image.src}</span>
                    )}
                  </>
                )}

                
                  <article class="text-pretty prose md:prose-lg lg:prose-xl dark:prose-invert max-w-none text-justify tracking-wide"><slot /></article> 
          
        </div>


</BaseLayout>