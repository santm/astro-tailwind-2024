---
import Container from "./Container.astro";
const textLinks: { label: string; href: string }[] = [
  { label: "Blog", href: "/blog/" },
  { label: "Nature", href: "/birdsandwildlife/" },
  { label: "Travel", href: "/travelalbums/" },
  { label: "About", href: "/about/" },
  { label: "Tags", href: "/tags/" },
  { label: "Search", href: "/search/" },
];
const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1); // remove the first "/"
---

<header>
    <nav class="absolute z-10 w-full border-b border-black/5 dark:border-white/5 lg:border-transparent">
        <Container>
            <div class="relative flex flex-wrap items-center justify-between gap-6 py-3 md:gap-0 md:py-4">
                <div class="relative z-20 flex w-full justify-between md:px-0 lg:w-max">
                    <a href="/#home" aria-label="logo" class="flex items-center space-x-2">
                        <div aria-hidden="true" class="flex space-x-1">
                            <div class="h-4 w-4 rounded-full bg-gray-900 dark:bg-white"></div>
                            <div class="h-6 w-2 bg-primary"></div>
                        </div>
                        <span class="text-2xl font-bold text-gray-900 dark:text-white">Astrolus</span>
                    </a>

                    <div class="relative flex max-h-10 items-center lg:hidden">
                        <button aria-label="humburger" id="hamburger" class="relative -mr-6 p-6">
                            <div aria-hidden="true" id="line" class="m-auto h-0.5 w-5 rounded bg-sky-900 transition duration-300 dark:bg-gray-300"></div>
                            <div aria-hidden="true" id="line2" class="m-auto mt-2 h-0.5 w-5 rounded bg-sky-900 transition duration-300 dark:bg-gray-300"></div>
                        </button>
                    </div>
                </div>
                <div id="navLayer" aria-hidden="true" class="fixed inset-0 z-10 h-screen w-screen origin-bottom scale-y-0 bg-white/70 backdrop-blur-2xl transition duration-500 dark:bg-gray-900/70 lg:hidden"></div>
                <div id="navlinks" class="invisible absolute top-full left-0 z-20 w-full origin-top-right translate-y-1 scale-90 flex-col flex-wrap justify-end gap-6 rounded-3xl border border-gray-100 bg-white p-8 opacity-0 shadow-2xl shadow-gray-600/10 transition-all duration-300 dark:border-gray-700 dark:bg-gray-800 dark:shadow-none lg:visible lg:relative lg:flex lg:w-7/12 lg:translate-y-0 lg:scale-100 lg:flex-row lg:items-center lg:gap-0 lg:border-none lg:bg-transparent lg:p-0 lg:opacity-100 lg:shadow-none">
                    <div class="w-full text-gray-600 dark:text-gray-200 lg:w-auto lg:pr-4 lg:pt-0">
                        <ul class="flex flex-col gap-6 tracking-wide lg:flex-row lg:gap-0 lg:text-sm">
                            {
                                textLinks.map(({ label, href }) => {
                                    const menuItemParentPath = href.slice(
                    1,
                    href.lastIndexOf("/")
                  ); // Extract the parent path

                  const isActive = currentPath.includes(menuItemParentPath);
                  return (
                  <li class={`block md:px-4 text-lg font-bold ${
                        isActive
                          ? "text-pink-500"
                          : "text-black dark:text-white"
                      }`}>
                                        <a href={href} data-astro-prefetch>
                                            <span class="lg:after:block lg:after:mx-auto lg:after:h-[0.15em] lg:after:bottom-0 lg:after:w-0 lg:after:bg-pink-500 lg:after:transition-[all_ease_in_out_300ms] lg:after:mt-1 lg:hover:after:w-full">{label}</span>
                                        </a>
                                    </li>
                  );
                                    
                                })
                            }
                            <li>
                                <!-- <a href="https://tailus.gumroad.com/l/astls-premium" target="_blank" class="flex gap-2 font-semibold text-gray-700 transition hover:text-primary dark:text-white dark:hover:text-white md:px-4">
                                    <span>Premium</span>
                                    <span class="flex rounded-full bg-primary/20 px-1.5 py-0.5 text-xs tracking-wider text-purple-700 dark:bg-white/10 dark:text-orange-300"> new</span>
                                </a> -->
                                <button
                                id="themeToggle"
                                aria-label="switch theme"
                                class="switcher group relative hidden h-9 w-9 rounded-full before:absolute before:inset-0 before:rounded-full before:border before:border-gray-200 before:bg-gray-50 before:bg-gradient-to-b before:transition-transform before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 dark:before:border-gray-700 dark:before:bg-gray-800 lg:flex"
                              >
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  class="transistion relative m-auto hidden h-5 w-5 fill-gray-500 duration-300 group-hover:rotate-180 group-hover:fill-yellow-400 dark:block dark:fill-gray-300"
                                  viewBox="0 0 20 20"
                                  fill="currentColor"
                                >
                                  <path
                                    fill-rule="evenodd"
                                    d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
                                    clip-rule="evenodd"></path>
                                </svg>
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  class="transistion relative m-auto h-5 w-5 fill-gray-500 duration-300 group-hover:-rotate-90 group-hover:fill-blue-900 dark:hidden"
                                  viewBox="0 0 20 20"
                                  fill="currentColor"
                                >
                                  <path
                                    d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
                                  ></path>
                                </svg>
                              </button>                            </li>
                        </ul>
                    </div>

                    <!-- <div class="mt-12 lg:mt-0">
                        <a href="/register" class="relative flex h-9 w-full items-center justify-center px-4 before:absolute before:inset-0 before:rounded-full before:bg-primary before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 sm:w-max">
                            <span class="relative text-sm font-semibold text-white"> Get Started</span>
                        </a>
                    </div> -->
                </div>
            </div>
        </Container>
    </nav>
</header>

  
<script>
    // This hamburger script and style should remain with same file as Navbar
    document.addEventListener("DOMContentLoaded", function () {
    let isToggled = false;
    const navlinks = document.querySelector("#navlinks");
    const hamburger = document.querySelector("#hamburger");
    const layer = document.querySelector("#navLayer");
    const textLinks = [...(navlinks?.querySelector("ul")?.children || [])];

    function toggleNavlinks() {
        if (isToggled) {
            navlinks!.classList.add("!visible", "!scale-100", "!opacity-100", "!lg:translate-y-0");
            hamburger!.classList.add("toggled");
            layer!.classList.add("origin-top", "scale-y-100");
        } else {
            navlinks!.classList.remove("!visible", "!scale-100", "!opacity-100", "!lg:translate-y-0");
            hamburger!.classList.remove("toggled");
            layer!.classList.remove("origin-top", "scale-y-100");
        }
    }

    hamburger!.addEventListener("click", () => {
        isToggled = !isToggled;
        toggleNavlinks();
    });

    textLinks.forEach((link) => {
        link.addEventListener("click", () => {
            isToggled = !isToggled;
            toggleNavlinks();
        });
    });
});

</script>

<style>
    #toggle_nav:checked ~ div #hamburger #line {
        @apply translate-y-1.5 rotate-45;
    }

    #toggle_nav:checked ~ div #hamburger #line2 {
        @apply -translate-y-1 -rotate-45;
    }

    .toggled div:first-child {
        @apply translate-y-1.5 rotate-45;
    }
    .toggled div:last-child {
        @apply -translate-y-1 -rotate-45;
    }
</style>